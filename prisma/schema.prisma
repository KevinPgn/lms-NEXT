datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  userCourses   UserCourse[]
  userLessons   UserLesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// LMs course education website
model Course {
  id String @id @default(cuid())
  title String
  description String
  image String?
  category String
  price Int
  rating Int @default(0)
  status String @default("draft")
  
  instructorId String
  instructor User @relation(fields: [instructorId], references: [id])

  lessons Lesson[]
  users UserCourse[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id String @id @default(cuid())
  title String
  content String
  free Boolean @default(false)
  videoUrl String?
  status String @default("draft")

  courseId String
  course Course @relation(fields: [courseId], references: [id])

  users UserLesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCourse {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])

  courseId String
  course Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLesson {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])

  lessonId String
  lesson Lesson @relation(fields: [lessonId], references: [id])

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
